Revert commit 'pfifo_fast use skb_array' do to performance impact

The commit below lowers the transmission performance by 5%.


commit c5ad119fb6c09b0297446be05bd66602fa564758
Author: John Fastabend <john.fastabend@gmail.com>
Date:   Thu Dec 7 09:58:19 2017 -0800

    net: sched: pfifo_fast use skb_array
    
    This converts the pfifo_fast qdisc to use the skb_array data structure
    and set the lockless qdisc bit. pfifo_fast is the first qdisc to support
    the lockless bit that can be a child of a qdisc requiring locking. So
    we add logic to clear the lock bit on initialization in these cases when
    the qdisc graft operation occurs.
    
    This also removes the logic used to pick the next band to dequeue from
    and instead just checks a per priority array for packets from top priority
    to lowest. This might need to be a bit more clever but seems to work
    for now.
    
    Signed-off-by: John Fastabend <john.fastabend@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/net/sched/sch_api.c b/net/sched/sch_api.c
index ce852f8c1d27..85fa6827d3ae 100644
--- a/net/sched/sch_api.c
+++ b/net/sched/sch_api.c
@@ -989,11 +989,6 @@ static int qdisc_graft(struct net_device *dev, struct Qdisc *parent,
 	} else {
 		const struct Qdisc_class_ops *cops = parent->ops->cl_ops;
 
-		/* Only support running class lockless if parent is lockless */
-		if (new && (new->flags & TCQ_F_NOLOCK) &&
-		    parent && !(parent->flags & TCQ_F_NOLOCK))
-			new->flags &= ~TCQ_F_NOLOCK;
-
 		err = -EOPNOTSUPP;
 		if (cops && cops->graft) {
 			unsigned long cl = cops->find(parent, classid);
diff --git a/net/sched/sch_generic.c b/net/sched/sch_generic.c
index 69078c82963e..95cba7b98a94 100644
--- a/net/sched/sch_generic.c
+++ b/net/sched/sch_generic.c
@@ -26,7 +26,6 @@
 #include <linux/list.h>
 #include <linux/slab.h>
 #include <linux/if_vlan.h>
-#include <linux/skb_array.h>
 #include <linux/if_macvlan.h>
 #include <net/sch_generic.h>
 #include <net/pkt_sched.h>
@@ -607,103 +606,93 @@ static const u8 prio2band[TC_PRIO_MAX + 1] = {
 
 /*
  * Private data for a pfifo_fast scheduler containing:
- *	- rings for priority bands
+ * 	- queues for the three band
+ * 	- bitmap indicating which of the bands contain skbs
  */
 struct pfifo_fast_priv {
-	struct skb_array q[PFIFO_FAST_BANDS];
+	u32 bitmap;
+	struct qdisc_skb_head q[PFIFO_FAST_BANDS];
 };
 
-static inline struct skb_array *band2list(struct pfifo_fast_priv *priv,
-					  int band)
+/*
+ * Convert a bitmap to the first band number where an skb is queued, where:
+ * 	bitmap=0 means there are no skbs on any band.
+ * 	bitmap=1 means there is an skb on band 0.
+ *	bitmap=7 means there are skbs on all 3 bands, etc.
+ */
+static const int bitmap2band[] = {-1, 0, 1, 0, 2, 0, 1, 0};
+
+static inline struct qdisc_skb_head *band2list(struct pfifo_fast_priv *priv,
+					     int band)
 {
-	return &priv->q[band];
+	return priv->q + band;
 }
 
 static int pfifo_fast_enqueue(struct sk_buff *skb, struct Qdisc *qdisc,
 			      struct sk_buff **to_free)
 {
-	int band = prio2band[skb->priority & TC_PRIO_MAX];
-	struct pfifo_fast_priv *priv = qdisc_priv(qdisc);
-	struct skb_array *q = band2list(priv, band);
-	unsigned int pkt_len = qdisc_pkt_len(skb);
-	int err;
-
-	err = skb_array_produce(q, skb);
-
-	if (unlikely(err))
-		return qdisc_drop_cpu(skb, qdisc, to_free);
+	if (qdisc->q.qlen < qdisc_dev(qdisc)->tx_queue_len) {
+		int band = prio2band[skb->priority & TC_PRIO_MAX];
+		struct pfifo_fast_priv *priv = qdisc_priv(qdisc);
+		struct qdisc_skb_head *list = band2list(priv, band);
+
+		priv->bitmap |= (1 << band);
+		qdisc->q.qlen++;
+		return __qdisc_enqueue_tail(skb, qdisc, list);
+	}
 
-	qdisc_qstats_cpu_qlen_inc(qdisc);
-	/* Note: skb can not be used after skb_array_produce(),
-	 * so we better not use qdisc_qstats_cpu_backlog_inc()
-	 */
-	this_cpu_add(qdisc->cpu_qstats->backlog, pkt_len);
-	return NET_XMIT_SUCCESS;
+	return qdisc_drop(skb, qdisc, to_free);
 }
 
 static struct sk_buff *pfifo_fast_dequeue(struct Qdisc *qdisc)
 {
 	struct pfifo_fast_priv *priv = qdisc_priv(qdisc);
-	struct sk_buff *skb = NULL;
-	int band;
+	int band = bitmap2band[priv->bitmap];
+
+	if (likely(band >= 0)) {
+		struct qdisc_skb_head *qh = band2list(priv, band);
+		struct sk_buff *skb = __qdisc_dequeue_head(qh);
 
-	for (band = 0; band < PFIFO_FAST_BANDS && !skb; band++) {
-		struct skb_array *q = band2list(priv, band);
+		if (likely(skb != NULL)) {
+			qdisc_qstats_backlog_dec(qdisc, skb);
+			qdisc_bstats_update(qdisc, skb);
+		}
 
-		if (__skb_array_empty(q))
-			continue;
+		qdisc->q.qlen--;
+		if (qh->qlen == 0)
+			priv->bitmap &= ~(1 << band);
 
-		skb = __skb_array_consume(q);
-	}
-	if (likely(skb)) {
-		qdisc_qstats_cpu_backlog_dec(qdisc, skb);
-		qdisc_bstats_cpu_update(qdisc, skb);
-		qdisc_qstats_cpu_qlen_dec(qdisc);
+		return skb;
 	}
 
-	return skb;
+	return NULL;
 }
 
 static struct sk_buff *pfifo_fast_peek(struct Qdisc *qdisc)
 {
 	struct pfifo_fast_priv *priv = qdisc_priv(qdisc);
-	struct sk_buff *skb = NULL;
-	int band;
+	int band = bitmap2band[priv->bitmap];
 
-	for (band = 0; band < PFIFO_FAST_BANDS && !skb; band++) {
-		struct skb_array *q = band2list(priv, band);
+	if (band >= 0) {
+		struct qdisc_skb_head *qh = band2list(priv, band);
 
-		skb = __skb_array_peek(q);
+		return qh->head;
 	}
 
-	return skb;
+	return NULL;
 }
 
 static void pfifo_fast_reset(struct Qdisc *qdisc)
 {
-	int i, band;
+	int prio;
 	struct pfifo_fast_priv *priv = qdisc_priv(qdisc);
 
-	for (band = 0; band < PFIFO_FAST_BANDS; band++) {
-		struct skb_array *q = band2list(priv, band);
-		struct sk_buff *skb;
-
-		/* NULL ring is possible if destroy path is due to a failed
-		 * skb_array_init() in pfifo_fast_init() case.
-		 */
-		if (!q->ring.queue)
-			continue;
-
-		while ((skb = __skb_array_consume(q)) != NULL)
-			kfree_skb(skb);
-	}
-
-	for_each_possible_cpu(i) {
-		struct gnet_stats_queue *q = per_cpu_ptr(qdisc->cpu_qstats, i);
+	for (prio = 0; prio < PFIFO_FAST_BANDS; prio++)
+		__qdisc_reset_queue(band2list(priv, prio));
 
-		q->backlog = 0;
-		q->qlen = 0;
-	}
+	priv->bitmap = 0;
+	qdisc->qstats.backlog = 0;
+	qdisc->q.qlen = 0;
 }
 
 static int pfifo_fast_dump(struct Qdisc *qdisc, struct sk_buff *skb)
@@ -722,48 +711,18 @@ static int pfifo_fast_dump(struct Qdisc *qdisc, struct sk_buff *skb)
 static int pfifo_fast_init(struct Qdisc *qdisc, struct nlattr *opt,
 			   struct netlink_ext_ack *extack)
 {
-	unsigned int qlen = qdisc_dev(qdisc)->tx_queue_len;
-	struct pfifo_fast_priv *priv = qdisc_priv(qdisc);
 	int prio;
+	struct pfifo_fast_priv *priv = qdisc_priv(qdisc);
 
-	/* guard against zero length rings */
-	if (!qlen)
-		return -EINVAL;
-
-	for (prio = 0; prio < PFIFO_FAST_BANDS; prio++) {
-		struct skb_array *q = band2list(priv, prio);
-		int err;
-
-		err = skb_array_init(q, qlen, GFP_KERNEL);
-		if (err)
-			return -ENOMEM;
-	}
+	for (prio = 0; prio < PFIFO_FAST_BANDS; prio++)
+		qdisc_skb_head_init(band2list(priv, prio));
 
 	/* Can by-pass the queue discipline */
 	qdisc->flags |= TCQ_F_CAN_BYPASS;
 	return 0;
 }
 
-static void pfifo_fast_destroy(struct Qdisc *sch)
-{
-	struct pfifo_fast_priv *priv = qdisc_priv(sch);
-	int prio;
-
-	for (prio = 0; prio < PFIFO_FAST_BANDS; prio++) {
-		struct skb_array *q = band2list(priv, prio);
-
-		/* NULL ring is possible if destroy path is due to a failed
-		 * skb_array_init() in pfifo_fast_init() case.
-		 */
-		if (!q->ring.queue)
-			continue;
-		/* Destroy ring but no need to kfree_skb because a call to
-		 * pfifo_fast_reset() has already done that work.
-		 */
-		ptr_ring_cleanup(&q->ring, NULL);
-	}
-}
-
+#if 0   // WORK: removed
 static int pfifo_fast_change_tx_queue_len(struct Qdisc *sch,
 					  unsigned int new_len)
 {
@@ -780,6 +739,7 @@ static int pfifo_fast_change_tx_queue_len(struct Qdisc *sch,
 	return skb_array_resize_multiple(bands, PFIFO_FAST_BANDS, new_len,
 					 GFP_KERNEL);
 }
+#endif
 
 struct Qdisc_ops pfifo_fast_ops __read_mostly = {
 	.id		=	"pfifo_fast",
@@ -788,12 +748,12 @@ struct Qdisc_ops pfifo_fast_ops __read_mostly = {
 	.dequeue	=	pfifo_fast_dequeue,
 	.peek		=	pfifo_fast_peek,
 	.init		=	pfifo_fast_init,
-	.destroy	=	pfifo_fast_destroy,
 	.reset		=	pfifo_fast_reset,
 	.dump		=	pfifo_fast_dump,
+#if 0   // WORK: removed
 	.change_tx_queue_len =  pfifo_fast_change_tx_queue_len,
+#endif
 	.owner		=	THIS_MODULE,
-	.static_flags	=	TCQ_F_NOLOCK | TCQ_F_CPUSTATS,
 };
 EXPORT_SYMBOL(pfifo_fast_ops);
 
