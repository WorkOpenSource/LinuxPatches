From b37c1cd2a5f50091f9a92d01eeb0175df7cddc60 Mon Sep 17 00:00:00 2001
From: Johannes Agricola <johannes.agricola@work-microwave.com>
Date: Thu, 24 Nov 2022 21:58:36 +0100
Subject: [PATCH 15/15] Adding driver for GPIO driven BCD switch

---
 .../bindings/input/gpio-bcd-keypad.txt        |  91 +++
 drivers/input/keyboard/Kconfig                |  10 +
 drivers/input/keyboard/Makefile               |   1 +
 drivers/input/keyboard/bcd_keypad.c           | 636 ++++++++++++++++++
 4 files changed, 738 insertions(+)
 create mode 100644 Documentation/devicetree/bindings/input/gpio-bcd-keypad.txt
 create mode 100644 drivers/input/keyboard/bcd_keypad.c

diff --git a/Documentation/devicetree/bindings/input/gpio-bcd-keypad.txt b/Documentation/devicetree/bindings/input/gpio-bcd-keypad.txt
new file mode 100644
index 000000000000..363bfd804959
--- /dev/null
+++ b/Documentation/devicetree/bindings/input/gpio-bcd-keypad.txt
@@ -0,0 +1,91 @@
+* GPIO driven bcd keypad device tree bindings
+
+GPIO driven bcd keypad is used to interface a SoC with a bcd switch. It
+can be configured with a keymapping - so that each BCD state creates on
+defined key. Otherwise, the code are directly forwareded.
+
+The value can be polled at /dev/bcd/valueX, where X is incremented for
+each instance.
+
+Required Properties:
+- compatible:		Should be "gpio-matrix-keypad"
+- label:            Name of the device
+- gpios:			List of gpios used as inputs. The gpio specifier
+			for this property depends on the gpio controller to
+			which these lines are connected.
+- linux,keymap:		The definition can be found at
+			bindings/input/matrix-keymap.txt. Only colums are used.
+
+Optional Properties:
+- linux,no-autorepeat:	do no enable autorepeat feature.
+- wakeup-source:	use any event on keypad as wakeup event.
+			(Legacy property supported: "linux,wakeup")
+- debounce-delay-ms:	debounce interval in milliseconds
+
+
+
+
+Example without mapping:
+
+	bcd_keypad {
+		compatible = "gpio-bcd-keypad";
+		label = "BCD Switch";
+		debounce-delay-ms = <5>;
+		col-scan-delay-us = <2>;
+
+		gpios = <
+			&gpio25 0 1
+			&gpio25 1 1
+			&gpio25 2 1
+			&gpio25 3 1
+			&gpio25 4 1
+			&gpio25 5 1
+			&gpio25 6 1
+			&gpio25 7 1
+			>;
+	};
+
+
+
+Example with mapping:
+
+	bcd_keypad {
+		compatible = "gpio-bcd-keypad";
+		label = "BCD Switch";
+		debounce-delay-ms = <5>;
+		col-scan-delay-us = <2>;
+
+		gpios = <
+			&gpio25 0 1
+			&gpio25 1 1
+			&gpio25 2 1
+			&gpio25 3 1
+			&gpio25 4 1
+			&gpio25 5 1
+			&gpio25 6 1
+			&gpio25 7 1
+			>;
+
+		linux,keymap = <
+			0x0000000B  // 00 = KEY_0
+			0x00010002  // 01 = KEY_1
+			0x00020003  // 02 = KEY_2
+			0x00030004  // 03 = KEY_3
+			0x00040005  // 04 = KEY_4
+			0x00050006  // 05 = KEY_5
+			0x00060007  // 06 = KEY_6
+			0x00070008  // 07 = KEY_7
+			0x00080009  // 08 = KEY_8
+			0x0009000A  // 09 = KEY_9
+			0x000a001E  // 10 = KEY_A
+			0x000b0030  // 11 = KEY_B
+			0x000c002E  // 12 = KEY_C
+			0x000d0020  // 13 = KEY_D
+			0x000e0012  // 14 = KEY_E
+			0x000f0021  // 15 = KEY_F
+			0x00100022  // 16 = KEY_G
+			0x00110023  // 17 = KEY_H
+			0x00120017  // 18 = KEY_I
+			0x00130024  // 19 = KEY_J
+			>;
+	};
diff --git a/drivers/input/keyboard/Kconfig b/drivers/input/keyboard/Kconfig
index e402915cc0c0..9de4738623b6 100644
--- a/drivers/input/keyboard/Kconfig
+++ b/drivers/input/keyboard/Kconfig
@@ -302,6 +302,16 @@ config KEYBOARD_MATRIX
 	  To compile this driver as a module, choose M here: the
 	  module will be called matrix_keypad.
 
+config KEYBOARD_BCD
+	tristate "GPIO driven BCD keypad support"
+	depends on GPIOLIB || COMPILE_TEST
+	select INPUT_MATRIXKMAP
+	help
+	  Enable support for GPIO driven BCD keypad.
+
+	  To compile this driver as a module, choose M here: the
+	  module will be called bcd_keypad.
+
 config KEYBOARD_HIL_OLD
 	tristate "HP HIL keyboard support (simple driver)"
 	depends on GSC || HP300
diff --git a/drivers/input/keyboard/Makefile b/drivers/input/keyboard/Makefile
index 1d689fdd5c00..ee771a5c7c08 100644
--- a/drivers/input/keyboard/Makefile
+++ b/drivers/input/keyboard/Makefile
@@ -40,6 +40,7 @@ obj-$(CONFIG_KEYBOARD_LOCOMO)		+= locomokbd.o
 obj-$(CONFIG_KEYBOARD_LPC32XX)		+= lpc32xx-keys.o
 obj-$(CONFIG_KEYBOARD_MAPLE)		+= maple_keyb.o
 obj-$(CONFIG_KEYBOARD_MATRIX)		+= matrix_keypad.o
+obj-$(CONFIG_KEYBOARD_BCD)			+= bcd_keypad.o
 obj-$(CONFIG_KEYBOARD_MAX7359)		+= max7359_keypad.o
 obj-$(CONFIG_KEYBOARD_MCS)		+= mcs_touchkey.o
 obj-$(CONFIG_KEYBOARD_MPR121)		+= mpr121_touchkey.o
diff --git a/drivers/input/keyboard/bcd_keypad.c b/drivers/input/keyboard/bcd_keypad.c
new file mode 100644
index 000000000000..bb68ecc6e98c
--- /dev/null
+++ b/drivers/input/keyboard/bcd_keypad.c
@@ -0,0 +1,636 @@
+/*
+ *  GPIO driven BCD keyboard driver
+ *
+ *  Copyright (c) 2018 Karl Krach <karl.krach@work-microwave.com>
+ *
+ *  Based on matrix_keypad.c
+ *
+ *  This program is free software; you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License version 2 as
+ *  published by the Free Software Foundation.
+ *
+ */
+
+#include <linux/types.h>
+#include <linux/delay.h>
+#include <linux/platform_device.h>
+#include <linux/input.h>
+#include <linux/irq.h>
+#include <linux/of_irq.h>
+#include <linux/interrupt.h>
+#include <linux/jiffies.h>
+#include <linux/module.h>
+#include <linux/gpio.h>
+#include <linux/input/matrix_keypad.h>
+#include <linux/slab.h>
+#include <linux/of.h>
+#include <linux/of_gpio.h>
+#include <linux/of_platform.h>
+#include <linux/bcd.h>
+#include <linux/miscdevice.h>   // struct miscdevice
+#include <linux/uaccess.h>      // copy_from_user
+
+#define MODNAME "bcd-keypad"
+
+struct bcd_keypad_platform_data {
+	const struct matrix_keymap_data *keymap_data;
+	const char *label;
+
+	const unsigned int *gpios;
+	unsigned int	num_gpios;
+
+	/* key debounce interval in milli-second */
+	unsigned int	debounce_ms;
+
+	unsigned int	clustered_irq;
+	unsigned int	clustered_irq_flags;
+
+	bool		active_low;
+	bool		wakeup;
+	bool		no_autorepeat;
+};
+
+
+struct bcd_keypad {
+	const struct bcd_keypad_platform_data *pdata;
+	struct input_dev *input_dev;
+
+	struct miscdevice misc_dev;
+	char misc_path[64];
+	size_t filepos;
+
+	DECLARE_BITMAP(disabled_gpios, MATRIX_MAX_ROWS);
+
+	uint32_t last_key_code;
+	struct delayed_work work;
+	spinlock_t lock;
+	bool scan_pending;
+	bool stopped;
+	bool gpio_all_disabled;
+};
+
+static void enable_irqs(struct bcd_keypad *keypad)
+{
+	const struct bcd_keypad_platform_data *pdata = keypad->pdata;
+	int i;
+
+	if (pdata->clustered_irq > 0)
+		enable_irq(pdata->clustered_irq);
+	else {
+		for (i = 0; i < pdata->num_gpios; i++)
+			enable_irq(gpio_to_irq(pdata->gpios[i]));
+	}
+}
+
+static void disable_irqs(struct bcd_keypad *keypad)
+{
+	const struct bcd_keypad_platform_data *pdata = keypad->pdata;
+	int i;
+
+	if (pdata->clustered_irq > 0)
+		disable_irq_nosync(pdata->clustered_irq);
+	else {
+		for (i = 0; i < pdata->num_gpios; i++)
+			disable_irq_nosync(gpio_to_irq(pdata->gpios[i]));
+	}
+}
+
+static int bcd_keypad_read_code(struct bcd_keypad *keypad) {
+	int cnt=0, bcd=0;
+	const struct bcd_keypad_platform_data *pdata = keypad->pdata;
+	int ret;
+
+	for (cnt = 0; cnt < pdata->num_gpios; cnt++) {
+		bool val = gpio_get_value_cansleep(pdata->gpios[cnt]) ?
+		                   !pdata->active_low : pdata->active_low;
+		bcd |= val << cnt;
+	}
+	ret =  const_bcd2bin(bcd);
+	//printk(KERN_ERR "%s: 0x%04x->%d max=%d\n", __func__, bcd, ret, pdata->num_gpios);
+	return ret;
+}
+
+/*
+ * This gets the keys from keyboard and reports it to input subsystem
+ */
+static void bcd_keypad_scan(struct work_struct *work)
+{
+	struct bcd_keypad *keypad =
+		container_of(work, struct bcd_keypad, work.work);
+	struct input_dev *input_dev = keypad->input_dev;
+	const unsigned short *keycodes = input_dev->keycode;
+	int code;
+
+	code = bcd_keypad_read_code(keypad);
+	if (code != keypad->last_key_code)
+	{
+		input_event(input_dev, EV_MSC, MSC_SCAN, code);
+		input_report_key(input_dev,
+				 keycodes ? keycodes[code] : code + 1,
+				 1);    // KEY_PRESS
+
+		input_event(input_dev, EV_MSC, MSC_SCAN, code);
+		input_report_key(input_dev,
+				 keycodes ? keycodes[code] : code + 1,
+				 0);    // KEY_RELEASE
+		input_sync(input_dev);
+	}
+	else printk(KERN_ERR "Ignored dupplicate keycode %d\n", code);
+
+	keypad->last_key_code = code;
+
+	/* Enable IRQs again */
+	spin_lock_irq(&keypad->lock);
+	keypad->scan_pending = false;
+	enable_irqs(keypad);
+	spin_unlock_irq(&keypad->lock);
+}
+
+static irqreturn_t bcd_keypad_interrupt(int irq, void *id)
+{
+	struct bcd_keypad *keypad = id;
+	unsigned long flags;
+
+	spin_lock_irqsave(&keypad->lock, flags);
+
+	/*
+	 * See if another IRQ beaten us to it and scheduled the
+	 * scan already. In that case we should not try to
+	 * disable IRQs again.
+	 */
+	if (unlikely(keypad->scan_pending || keypad->stopped))
+		goto out;
+
+	disable_irqs(keypad);
+	keypad->scan_pending = true;
+	schedule_delayed_work(&keypad->work,
+		msecs_to_jiffies(keypad->pdata->debounce_ms));
+
+out:
+	spin_unlock_irqrestore(&keypad->lock, flags);
+	return IRQ_HANDLED;
+}
+
+static int bcd_keypad_start(struct input_dev *dev)
+{
+	struct bcd_keypad *keypad = input_get_drvdata(dev);
+
+	keypad->stopped = false;
+	mb();
+
+	/*
+	 * Schedule an immediate key scan to capture current key state;
+	 * columns will be activated and IRQs be enabled after the scan.
+	 */
+	schedule_delayed_work(&keypad->work, 0);
+
+	return 0;
+}
+
+static void bcd_keypad_stop(struct input_dev *dev)
+{
+	struct bcd_keypad *keypad = input_get_drvdata(dev);
+
+	keypad->stopped = true;
+	mb();
+	flush_work(&keypad->work.work);
+	/*
+	 * bcd_keypad_scan() will leave IRQs enabled;
+	 * we should disable them now.
+	 */
+	disable_irqs(keypad);
+}
+
+#ifdef CONFIG_PM_SLEEP
+static void bcd_keypad_enable_wakeup(struct bcd_keypad *keypad)
+{
+	const struct bcd_keypad_platform_data *pdata = keypad->pdata;
+	unsigned int gpio;
+	int i;
+
+	if (pdata->clustered_irq > 0) {
+		if (enable_irq_wake(pdata->clustered_irq) == 0)
+			keypad->gpio_all_disabled = true;
+	} else {
+
+		for (i = 0; i < pdata->num_gpios; i++) {
+			if (!test_bit(i, keypad->disabled_gpios)) {
+				gpio = pdata->gpios[i];
+
+				if (enable_irq_wake(gpio_to_irq(gpio)) == 0)
+					__set_bit(i, keypad->disabled_gpios);
+			}
+		}
+	}
+}
+
+static void bcd_keypad_disable_wakeup(struct bcd_keypad *keypad)
+{
+	const struct bcd_keypad_platform_data *pdata = keypad->pdata;
+	unsigned int gpio;
+	int i;
+
+	if (pdata->clustered_irq > 0) {
+		if (keypad->gpio_all_disabled) {
+			disable_irq_wake(pdata->clustered_irq);
+			keypad->gpio_all_disabled = false;
+		}
+	} else {
+		for (i = 0; i < pdata->num_gpios; i++) {
+			if (test_and_clear_bit(i, keypad->disabled_gpios)) {
+				gpio = pdata->gpios[i];
+				disable_irq_wake(gpio_to_irq(gpio));
+			}
+		}
+	}
+}
+
+static int bcd_keypad_suspend(struct device *dev)
+{
+	struct platform_device *pdev = to_platform_device(dev);
+	struct bcd_keypad *keypad = platform_get_drvdata(pdev);
+
+	bcd_keypad_stop(keypad->input_dev);
+
+	if (device_may_wakeup(&pdev->dev))
+		bcd_keypad_enable_wakeup(keypad);
+
+	return 0;
+}
+
+static int bcd_keypad_resume(struct device *dev)
+{
+	struct platform_device *pdev = to_platform_device(dev);
+	struct bcd_keypad *keypad = platform_get_drvdata(pdev);
+
+	if (device_may_wakeup(&pdev->dev))
+		bcd_keypad_disable_wakeup(keypad);
+
+	bcd_keypad_start(keypad->input_dev);
+
+	return 0;
+}
+#endif
+
+static SIMPLE_DEV_PM_OPS(bcd_keypad_pm_ops,
+			 bcd_keypad_suspend, bcd_keypad_resume);
+
+static int bcd_keypad_init_gpio(struct platform_device *pdev,
+				   struct bcd_keypad *keypad)
+{
+	const struct bcd_keypad_platform_data *pdata = keypad->pdata;
+	int i, err;
+
+	for (i = 0; i < pdata->num_gpios; i++) {
+		err = gpio_request(pdata->gpios[i], "bcd_kbd_gpio");
+		if (err) {
+			dev_err(&pdev->dev,
+				"failed to request GPIO%d for index %d\n",
+				pdata->gpios[i], i);
+			goto err_free_gpios;
+		}
+
+		gpio_direction_input(pdata->gpios[i]);
+	}
+
+	if (pdata->clustered_irq > 0) {
+		err = devm_request_any_context_irq(&pdev->dev, pdata->clustered_irq,
+				bcd_keypad_interrupt,
+				pdata->clustered_irq_flags,
+				"bcd-keypad", keypad);
+		if (err < 0) {
+			dev_err(&pdev->dev,
+				"Unable to acquire clustered interrupt\n");
+			goto err_free_gpios;
+		}
+		printk(KERN_NOTICE "Registered IRQ %u with flags 0x%x for bcd_keypad.\n",
+		       pdata->clustered_irq, pdata->clustered_irq_flags);
+	} else {
+		for (i = 0; i < pdata->num_gpios; i++) {
+			err = request_any_context_irq(
+					gpio_to_irq(pdata->gpios[i]),
+					bcd_keypad_interrupt,
+					IRQF_TRIGGER_RISING |
+					IRQF_TRIGGER_FALLING | IRQF_SHARED,
+					"matrix-keypad", keypad);
+			if (err < 0) {
+				dev_err(&pdev->dev,
+					"Unable to acquire interrupt for GPIO line %i\n",
+					pdata->gpios[i]);
+				goto err_free_irqs;
+			}
+			printk(KERN_NOTICE "Registered IRQ %u with flags 0x%x for bcd_keypad GPIO.\n",
+			       gpio_to_irq(pdata->gpios[i]), IRQF_TRIGGER_RISING |
+			       IRQF_TRIGGER_FALLING | IRQF_SHARED);
+		}
+	}
+
+	/* initialized as disabled - enabled by input->open */
+	disable_irqs(keypad);
+	return 0;
+
+err_free_irqs:
+	while (--i >= 0)
+		free_irq(gpio_to_irq(pdata->gpios[i]), keypad);
+	i = pdata->num_gpios;
+err_free_gpios:
+	while (--i >= 0)
+		gpio_free(pdata->gpios[i]);
+
+	return err;
+}
+
+static void bcd_keypad_free_gpio(struct bcd_keypad *keypad)
+{
+	const struct bcd_keypad_platform_data *pdata = keypad->pdata;
+	int i;
+
+	if (pdata->clustered_irq > 0) {
+		free_irq(pdata->clustered_irq, keypad);
+	} else {
+		for (i = 0; i < pdata->num_gpios; i++)
+			free_irq(gpio_to_irq(pdata->gpios[i]), keypad);
+	}
+
+	for (i = 0; i < pdata->num_gpios; i++)
+		gpio_free(pdata->gpios[i]);
+
+}
+
+#ifdef CONFIG_OF
+static struct bcd_keypad_platform_data *bcd_keypad_parse_dt(struct device *dev)
+{
+	struct bcd_keypad_platform_data *pdata;
+	struct device_node *np = dev->of_node;
+	unsigned int *gpios, gpio_cnt;
+	int i, nrow, num_irq;
+
+	if (!np) {
+		dev_err(dev, "device lacks DT data\n");
+		return ERR_PTR(-ENODEV);
+	}
+
+	pdata = devm_kzalloc(dev, sizeof(*pdata), GFP_KERNEL);
+	if (!pdata) {
+		dev_err(dev, "could not allocate memory for platform data\n");
+		return ERR_PTR(-ENOMEM);
+	}
+
+	pdata->num_gpios = nrow = of_gpio_named_count(np, "gpios");
+	if (nrow <= 0) {
+		dev_err(dev, "number of keypad gpios not specified\n");
+		return ERR_PTR(-EINVAL);
+	}
+
+	if (of_get_property(np, "linux,no-autorepeat", NULL))
+		pdata->no_autorepeat = true;
+
+	device_property_read_string(dev, "label", &pdata->label);
+
+	pdata->wakeup = of_property_read_bool(np, "wakeup-source") ||
+			of_property_read_bool(np, "linux,wakeup"); /* legacy */
+
+	if (of_get_property(np, "gpio-activelow", NULL))
+		pdata->active_low = true;
+
+	of_property_read_u32(np, "debounce-delay-ms", &pdata->debounce_ms);
+
+	num_irq = of_irq_count(np);
+	if (num_irq > 0) {
+		if (num_irq != 1) {
+			dev_err(dev, "Cannot handle more than one IRQ!\n");
+			return ERR_PTR(-ENOMEM);
+		}
+		pdata->clustered_irq = of_irq_get(np, 0);
+		pdata->clustered_irq_flags = IRQF_TRIGGER_RISING |
+		                             IRQF_TRIGGER_FALLING | IRQF_SHARED;
+	}
+	gpios = devm_kzalloc(dev,
+			     sizeof(unsigned int) * pdata->num_gpios,
+			     GFP_KERNEL);
+	if (!gpios) {
+		dev_err(dev, "could not allocate memory for gpios\n");
+		return ERR_PTR(-ENOMEM);
+	}
+
+	gpio_cnt = 0;
+	for (i = 0; i < pdata->num_gpios ; i++) {
+		int gpio = of_get_named_gpio(np, "gpios", i);
+		if (gpio < 0) {
+			dev_err(dev, "GPIO with index %d not available: %d\n", i, gpio);
+			continue;
+		}
+		gpios[gpio_cnt] = gpio;
+		gpio_cnt++;
+	}
+	dev_notice(dev, "Found %u of %u GPIOs.\n", gpio_cnt, pdata->num_gpios);
+	pdata->num_gpios = gpio_cnt;
+
+	pdata->gpios = gpios;
+
+	return pdata;
+}
+#else
+static inline struct bcd_keypad_platform_data *
+bcd_keypad_parse_dt(struct device *dev)
+{
+	dev_err(dev, "no platform data defined\n");
+
+	return ERR_PTR(-EINVAL);
+}
+#endif
+
+
+
+
+
+
+static int fop_open(struct inode *in, struct file *f)
+{
+	struct miscdevice *misc = f->private_data;
+	struct bcd_keypad* keypad = container_of(misc, struct bcd_keypad, misc_dev);
+	if (MINOR(in->i_rdev) != misc->minor) {
+		return -ENOENT;
+	}
+	keypad->filepos = 0;
+	return 0;
+}
+
+static int fop_close(struct inode *in, struct file *f)
+{
+	struct miscdevice *misc = f->private_data;
+	if (MINOR(in->i_rdev) != misc->minor) {
+		printk(KERN_WARNING "work-disp: fop_close(): Called on bad minor number.\n");
+		return -EBADF;
+	}
+	return 0;
+}
+
+static ssize_t fop_read(struct file *f, char *buf, size_t n, loff_t *offset)
+{
+	struct miscdevice *misc = f->private_data;
+	struct bcd_keypad* keypad = container_of(misc, struct bcd_keypad, misc_dev);
+	char buffer[8];
+	ssize_t len, to_copy = 0;
+
+	len = snprintf(buffer, n, "%02d", bcd_keypad_read_code(keypad));
+	if (len > keypad->filepos) {
+		to_copy = len - keypad->filepos;
+		if (copy_to_user(buf, buffer+keypad->filepos, to_copy) != 0) {
+			return -EFAULT;
+		}
+		keypad->filepos += to_copy;
+	}
+
+	return to_copy;
+}
+
+static struct file_operations fops = {
+	.open = fop_open,
+	.release = fop_close,
+	.read = fop_read,
+};
+
+
+#include <linux/input/mt.h>
+
+
+
+
+static int bcd_keypad_probe(struct platform_device *pdev)
+{
+	const struct bcd_keypad_platform_data *pdata;
+	struct bcd_keypad *keypad;
+	struct input_dev *input_dev;
+	static int instance_counter = 0;
+	int err, i;
+
+	pdata = dev_get_platdata(&pdev->dev);
+	if (!pdata) {
+		pdata = bcd_keypad_parse_dt(&pdev->dev);
+		if (IS_ERR(pdata)) {
+			dev_err(&pdev->dev, "no platform data defined\n");
+			return PTR_ERR(pdata);
+		}
+		if (pdata->num_gpios < 1) {
+			dev_err(&pdev->dev, "No GPIOs available!\n");
+			return -ENODEV;
+		}
+	} /*else if (!pdata->keymap_data) {
+		dev_err(&pdev->dev, "no keymap data defined\n");
+		return -EINVAL;
+	}*/
+
+	keypad = kzalloc(sizeof(struct bcd_keypad), GFP_KERNEL);
+	input_dev = input_allocate_device();
+	if (!keypad || !input_dev) {
+		err = -ENOMEM;
+		goto err_free_mem;
+	}
+
+	keypad->input_dev = input_dev;
+	keypad->pdata = pdata;
+	keypad->stopped = true;
+	INIT_DELAYED_WORK(&keypad->work, bcd_keypad_scan);
+	spin_lock_init(&keypad->lock);
+
+	input_dev->name		= pdata->label ? : pdev->name;
+	input_dev->id.bustype	= BUS_HOST;
+	input_dev->dev.parent	= &pdev->dev;
+	input_dev->open		= bcd_keypad_start;
+	input_dev->close	= bcd_keypad_stop;
+
+	if (pdata->keymap_data || device_property_present(&pdev->dev, "linux,keymap")) {
+		err = matrix_keypad_build_keymap(pdata->keymap_data, NULL,
+						 1 << 0, 1 << pdata->num_gpios,
+						 NULL, input_dev);
+		if (err) {
+			dev_err(&pdev->dev, "failed to build keymap\n");
+			goto err_free_mem;
+		}
+	}
+	else {
+		for (i = 1; i <= 100 ; i++ ) {
+			input_set_capability(input_dev, EV_KEY, i);
+		}
+		__clear_bit(KEY_RESERVED, input_dev->keybit);
+	}
+
+	if (!pdata->no_autorepeat)
+		__set_bit(EV_REP, input_dev->evbit);
+	input_set_capability(input_dev, EV_MSC, MSC_SCAN);
+	input_set_drvdata(input_dev, keypad);
+
+	err = bcd_keypad_init_gpio(pdev, keypad);
+	if (err)
+		goto err_free_mem;
+
+	err = input_register_device(keypad->input_dev);
+	if (err)
+		goto err_free_gpio;
+
+	device_init_wakeup(&pdev->dev, pdata->wakeup);
+	platform_set_drvdata(pdev, keypad);
+
+	// does it make sence to use the same index as /dev/input/eventX?
+	snprintf(keypad->misc_path, sizeof(keypad->misc_path), "bcd/value%d", instance_counter);
+	instance_counter++;
+
+	keypad->misc_dev.name = pdata->label ? : pdev->name;
+	keypad->misc_dev.nodename = keypad->misc_path;
+	keypad->misc_dev.minor = MISC_DYNAMIC_MINOR;
+	keypad->misc_dev.fops = &fops;
+	keypad->misc_dev.mode = 0444;
+
+	err = misc_register(&keypad->misc_dev);
+	if (err) {
+		printk(KERN_WARNING "Failed to register misc device!\n");
+		goto err_free_gpio;
+	}
+
+	return 0;
+
+err_free_gpio:
+	bcd_keypad_free_gpio(keypad);
+err_free_mem:
+	input_free_device(input_dev);
+	kfree(keypad);
+	return err;
+}
+
+static int bcd_keypad_remove(struct platform_device *pdev)
+{
+	struct bcd_keypad *keypad = platform_get_drvdata(pdev);
+
+	misc_deregister(&keypad->misc_dev);
+
+	bcd_keypad_free_gpio(keypad);
+	input_unregister_device(keypad->input_dev);
+	kfree(keypad);
+
+	return 0;
+}
+
+#ifdef CONFIG_OF
+static const struct of_device_id bcd_keypad_dt_match[] = {
+	{ .compatible = "gpio-bcd-keypad" },
+	{ }
+};
+MODULE_DEVICE_TABLE(of, bcd_keypad_dt_match);
+#endif
+
+static struct platform_driver bcd_keypad_driver = {
+	.probe		= bcd_keypad_probe,
+	.remove		= bcd_keypad_remove,
+	.driver		= {
+		.name	= MODNAME,
+		.pm	= &bcd_keypad_pm_ops,
+		.of_match_table = of_match_ptr(bcd_keypad_dt_match),
+	},
+};
+module_platform_driver(bcd_keypad_driver);
+
+MODULE_AUTHOR("Karl Krach <karl.krach@work-microwave.com>");
+MODULE_DESCRIPTION("GPIO Driven BCD Keypad Driver");
+MODULE_LICENSE("GPL v2");
+MODULE_ALIAS("platform:bcd-keypad");
-- 
2.25.1

