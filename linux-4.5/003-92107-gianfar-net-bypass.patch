diff --git a/drivers/net/ethernet/freescale/Makefile b/drivers/net/ethernet/freescale/Makefile
index cbe21dc7e37e..1acbc431e124 100644
--- a/drivers/net/ethernet/freescale/Makefile
+++ b/drivers/net/ethernet/freescale/Makefile
@@ -17,6 +17,7 @@ obj-$(CONFIG_FSL_XGMAC_MDIO) += xgmac_mdio.o
 obj-$(CONFIG_GIANFAR) += gianfar_driver.o
 obj-$(CONFIG_PTP_1588_CLOCK_GIANFAR) += gianfar_ptp.o
 gianfar_driver-objs := gianfar.o \
+		gianfar_work.o \
 		gianfar_ethtool.o
 obj-$(CONFIG_UCC_GETH) += ucc_geth_driver.o
 ucc_geth_driver-objs := ucc_geth.o ucc_geth_ethtool.o
diff --git a/drivers/net/ethernet/freescale/gianfar.c b/drivers/net/ethernet/freescale/gianfar.c
index b9ecf197ad11..108f175ac749 100644
--- a/drivers/net/ethernet/freescale/gianfar.c
+++ b/drivers/net/ethernet/freescale/gianfar.c
@@ -152,7 +152,7 @@ MODULE_AUTHOR("Freescale Semiconductor, Inc");
 MODULE_DESCRIPTION("Gianfar Ethernet Driver");
 MODULE_LICENSE("GPL");
 
-static void gfar_init_rxbdp(struct gfar_priv_rx_q *rx_queue, struct rxbd8 *bdp,
+void gfar_init_rxbdp(struct gfar_priv_rx_q *rx_queue, struct rxbd8 *bdp,
 			    dma_addr_t buf)
 {
 	u32 lstatus;
@@ -209,6 +209,10 @@ static void gfar_init_bds(struct net_device *ndev)
 		rx_queue->next_to_use = 0;
 		rx_queue->next_to_alloc = 0;
 
+		if (likely(priv->is_work)) {
+			work_alloc_rx_buffs(rx_queue, gfar_rxbd_unused(rx_queue));
+		}
+		else
 		/* make sure next_to_clean != next_to_use after this
 		 * by leaving at least 1 unused descriptor
 		 */
@@ -233,6 +237,10 @@ static int gfar_alloc_skb_resources(struct net_device *ndev)
 	for (i = 0; i < priv->num_tx_queues; i++)
 		priv->total_tx_ring_size += priv->tx_queue[i]->tx_ring_size;
 
+	if (likely(priv->is_work)) {
+		work_verify_rx_queue(priv);
+	}
+
 	priv->total_rx_ring_size = 0;
 	for (i = 0; i < priv->num_rx_queues; i++)
 		priv->total_rx_ring_size += priv->rx_queue[i]->rx_ring_size;
@@ -284,11 +292,18 @@ static int gfar_alloc_skb_resources(struct net_device *ndev)
 
 	for (i = 0; i < priv->num_rx_queues; i++) {
 		rx_queue = priv->rx_queue[i];
+		if (likely(priv->is_work)) {
+			work_allocate_buffer(rx_queue);
+			if (!rx_queue->rx_pktbuff)
+				goto cleanup;
+		}
+		else {
 		rx_queue->rx_buff = kcalloc(rx_queue->rx_ring_size,
 					    sizeof(*rx_queue->rx_buff),
 					    GFP_KERNEL);
 		if (!rx_queue->rx_buff)
 			goto cleanup;
+		}
 	}
 
 	gfar_init_bds(ndev);
@@ -578,8 +593,12 @@ static void gfar_free_rx_queues(struct gfar_private *priv)
 {
 	int i;
 
-	for (i = 0; i < priv->num_rx_queues; i++)
+	for (i = 0; i < priv->num_rx_queues; i++) {
+		if (likely(priv->is_work)) {
+			work_free_buffer(priv->rx_queue[i]);
+		}
 		kfree(priv->rx_queue[i]);
+	}
 }
 
 static void unmap_group_regs(struct gfar_private *priv)
@@ -819,6 +838,11 @@ static int gfar_of_init(struct platform_device *ofdev, struct net_device **pdev)
 	if (err)
 		goto tx_alloc_failed;
 
+	if (ofdev && of_device_is_compatible(ofdev->dev.of_node, "gianfar-work")) {
+		priv->is_work = 1;
+		printk(KERN_NOTICE "Using WORK's gianfar driver.\n");
+	}
+
 	err = gfar_alloc_rx_queues(priv);
 	if (err)
 		goto rx_alloc_failed;
@@ -1160,7 +1184,7 @@ void gfar_mac_reset(struct gfar_private *priv)
 
 	/* Initialize the max receive frame/buffer lengths */
 	gfar_write(&regs->maxfrm, GFAR_JUMBO_FRAME_SIZE);
-	gfar_write(&regs->mrblr, GFAR_RXB_SIZE);
+	gfar_write(&regs->mrblr, priv->is_work ? GFAR_JUMBO_FRAME_SIZE : GFAR_RXB_SIZE);
 
 	/* Initialize the Minimum Frame Length Register */
 	gfar_write(&regs->minflr, MINFLR_INIT_SETTINGS);
@@ -1459,6 +1483,11 @@ static int gfar_probe(struct platform_device *ofdev)
 		netdev_info(dev, "TX BD ring size for Q[%d]: %d\n",
 			    i, priv->tx_queue[i]->tx_ring_size);
 
+	if (likely(priv->is_work)) {
+		err = work_create_fs(dev);
+		if (err != 0) return err;
+	}
+
 	return 0;
 
 register_fail:
@@ -2031,8 +2060,14 @@ static void free_skb_resources(struct gfar_private *priv)
 
 	for (i = 0; i < priv->num_rx_queues; i++) {
 		rx_queue = priv->rx_queue[i];
+		if (likely(priv->is_work)) {
+			work_free_rx_queue(rx_queue);
+			return ;
+		}
+		else {
 		if (rx_queue->rx_buff)
 			free_skb_rx_queue(rx_queue);
+		}
 	}
 
 	dma_free_coherent(priv->dev,
@@ -2781,7 +2816,7 @@ static bool gfar_new_page(struct gfar_priv_rx_q *rxq, struct gfar_rx_buff *rxb)
 	return true;
 }
 
-static void gfar_rx_alloc_err(struct gfar_priv_rx_q *rx_queue)
+void gfar_rx_alloc_err(struct gfar_priv_rx_q *rx_queue)
 {
 	struct gfar_private *priv = netdev_priv(rx_queue->ndev);
 	struct gfar_extra_stats *estats = &priv->extra_stats;
@@ -3084,6 +3119,8 @@ int gfar_clean_rx_ring(struct gfar_priv_rx_q *rx_queue, int rx_work_limit)
 		u32 lstatus;
 
 		if (cleaned_cnt >= GFAR_RX_BUFF_ALLOC) {
+			if (likely(priv->is_work)) work_alloc_rx_buffs(rx_queue, cleaned_cnt);
+			else
 			gfar_alloc_rx_buffs(rx_queue, cleaned_cnt);
 			cleaned_cnt = 0;
 		}
@@ -3096,10 +3133,15 @@ int gfar_clean_rx_ring(struct gfar_priv_rx_q *rx_queue, int rx_work_limit)
 		/* order rx buffer descriptor reads */
 		rmb();
 
+		if (likely(priv->is_work)) {
+			skb = work_get_next_rxbuff(rx_queue, lstatus, skb);
+		}
+		else {
 		/* fetch next to clean buffer from the ring */
 		skb = gfar_get_next_rxbuff(rx_queue, lstatus, skb);
 		if (unlikely(!skb))
 			break;
+		}
 
 		cleaned_cnt++;
 		howmany++;
@@ -3123,6 +3165,11 @@ int gfar_clean_rx_ring(struct gfar_priv_rx_q *rx_queue, int rx_work_limit)
 			continue;
 		}
 
+		// Continue at top, when packet was consumed by skippy
+		if (likely(priv->is_work && skb == NULL)) {
+			continue;
+		}
+
 		/* Increment the number of packets */
 		total_pkts++;
 		total_bytes += skb->len;
@@ -3143,8 +3190,11 @@ int gfar_clean_rx_ring(struct gfar_priv_rx_q *rx_queue, int rx_work_limit)
 	rx_queue->stats.rx_packets += total_pkts;
 	rx_queue->stats.rx_bytes += total_bytes;
 
-	if (cleaned_cnt)
+	if (cleaned_cnt) {
+		if (likely(priv->is_work)) work_alloc_rx_buffs(rx_queue, cleaned_cnt);
+		else
 		gfar_alloc_rx_buffs(rx_queue, cleaned_cnt);
+	}
 
 	/* Update Last Free RxBD pointer for LFC */
 	if (unlikely(priv->tx_actual_en)) {
@@ -3760,6 +3810,10 @@ static const struct of_device_id gfar_match[] =
 		.compatible = "gianfar",
 	},
 	{
+		.type = "network",
+		.compatible = "gianfar-work",
+	},
+	{
 		.compatible = "fsl,etsec2",
 	},
 	{},
diff --git a/drivers/net/ethernet/freescale/gianfar.h b/drivers/net/ethernet/freescale/gianfar.h
index cb77667971a7..0c29bf86f22a 100644
--- a/drivers/net/ethernet/freescale/gianfar.h
+++ b/drivers/net/ethernet/freescale/gianfar.h
@@ -46,6 +46,8 @@
 #include <linux/workqueue.h>
 #include <linux/ethtool.h>
 
+#include "gianfar_work.h"
+
 struct ethtool_flow_spec_container {
 	struct ethtool_rx_flow_spec fs;
 	struct list_head list;
@@ -1055,6 +1057,8 @@ struct gfar_priv_rx_q {
 	unsigned char rxcoalescing;
 	unsigned long rxic;
 	dma_addr_t rx_bd_dma_base;
+
+	struct work_priv_rx_pkt *rx_pktbuff __aligned(SMP_CACHE_BYTES);
 };
 
 enum gfar_irqinfo_id {
@@ -1203,6 +1207,10 @@ struct gfar_private {
 	/*Filer table*/
 	unsigned int ftp_rqfpr[MAX_FILER_IDX + 1];
 	unsigned int ftp_rqfcr[MAX_FILER_IDX + 1];
+
+	int is_work;
+	unsigned char f_mac[ETH_ALEN];  // MAC to filter
+	__be32 f_ipv4;                  // IPv4 to filter
 };
 
 
diff --git a/drivers/net/ethernet/freescale/gianfar_work.c b/drivers/net/ethernet/freescale/gianfar_work.c
new file mode 100644
index 000000000000..1e4ff927ad6c
--- /dev/null
+++ b/drivers/net/ethernet/freescale/gianfar_work.c
@@ -0,0 +1,452 @@
+/*
+ * drivers/net/ethernet/freescale/gianfar_work.h
+ *
+ * WORK's Supplement for Gianfar Ethernet Driver
+ *
+ * Author: Karl Krach <karl.krach@work-microwave.com>
+ *
+ * This program is free software; you can redistribute  it and/or modify it
+ * under  the terms of  the GNU General  Public License as published by the
+ * Free Software Foundation;  either version 2 of the  License, or (at your
+ * option) any later version.
+ */
+
+
+#include "gianfar_work.h"
+#include "gianfar.h"
+
+#include <linux/ip.h>
+#include <linux/etherdevice.h>
+#include <linux/proc_fs.h>
+
+
+// Reusing functions from gianfar.c
+void gfar_rx_alloc_err(struct gfar_priv_rx_q *rx_queue);
+void gfar_init_rxbdp(struct gfar_priv_rx_q *rx_queue, struct rxbd8 *bdp, dma_addr_t buf);
+
+
+#define RX_RING_SIZE (4096) // is about 36MB buffer-size
+
+
+static int work_buffer_open(struct inode *node, struct file *file) {
+	struct gfar_private *priv = PDE_DATA(node);
+	file->private_data = priv;
+	return 0;
+}
+
+static ssize_t work_buffer_read(struct file *file, char __user *buf, size_t size, loff_t *ppos) {
+	return 0;
+}
+
+static int work_buffer_close(struct inode *inode, struct file *file) {
+	return 0;
+}
+
+static void work_buffer_mmap_open(struct vm_area_struct *vma) {
+}
+
+static void work_buffer_mmap_close(struct vm_area_struct *vma) {
+}
+
+static int work_buffer_mmap_fault(struct vm_area_struct *vma, struct vm_fault *vmf) {
+	struct gfar_private *priv = vma->vm_private_data;
+	struct gfar_priv_rx_q *rx_queue;
+	pgoff_t pgoff = vmf->pgoff;
+	struct page *page;
+
+	if (priv->num_rx_queues < 1) {
+		printk(KERN_ERR "%s WORK: Rx-queue missing!\n", __func__);
+		return VM_FAULT_OOM;
+	}
+	if (priv->num_rx_queues > 1) {
+		printk(KERN_ERR "%s WORK: Invalid configuration with more than one rx-queue!\n", __func__);
+		return VM_FAULT_OOM;
+	}
+
+	rx_queue = priv->rx_queue[0];
+	if (!rx_queue || !rx_queue->rx_pktbuff) {
+		printk(KERN_ERR "%s WORK: Device not ready!\n", __func__);
+		return VM_FAULT_MAJOR;
+	}
+
+	if ((pgoff << PAGE_SHIFT) > (rx_queue->rx_ring_size * sizeof(rx_queue->rx_pktbuff[0]))) {
+		printk(KERN_ERR "%s WORK: Given offset extends mapped area!\n", __func__);
+		return VM_FAULT_OOM;
+	}
+
+	page = virt_to_page((char*)(rx_queue->rx_pktbuff) + (pgoff << PAGE_SHIFT));
+	if (!page) {
+		printk(KERN_ERR "%s: Failed to map offset 0x%lx!\n",
+		       __func__, (pgoff << PAGE_SHIFT));
+		return VM_FAULT_SIGBUS;
+	}
+
+	/* increment the reference count of this page */
+	get_page(page);
+	vmf->page = page;
+
+	return 0;
+}
+
+static struct vm_operations_struct work_buffer_mmap_vm_ops = {
+	.open  = work_buffer_mmap_open,
+	.close = work_buffer_mmap_close,
+	.fault = work_buffer_mmap_fault,
+};
+
+static int work_buffer_mmap(struct file *f, struct vm_area_struct *vma) {
+	unsigned long size = vma->vm_end - vma->vm_start;
+	struct gfar_private *priv = f->private_data;
+
+	if (size != (RX_RING_SIZE * sizeof(priv->rx_queue[0]->rx_pktbuff[0]))) {
+		printk(KERN_ERR "Memory map size is %lu instead of %u bytes!\n",
+		       size, RX_RING_SIZE * sizeof(priv->rx_queue[0]->rx_pktbuff[0]));
+		return -EINVAL;
+	}
+
+	vma->vm_ops = &work_buffer_mmap_vm_ops;
+	vma->vm_private_data = priv;
+	work_buffer_mmap_open(vma);
+
+	return 0;
+}
+
+static const struct file_operations work_buffer_fops = {
+	.open = &work_buffer_open,
+	.read = &work_buffer_read,
+	.release = &work_buffer_close,
+	.mmap = &work_buffer_mmap,
+};
+
+
+
+static int work_ipv4_open(struct inode *node, struct file *file) {
+	file->private_data = kmalloc(sizeof(int), GFP_KERNEL);
+	*((int*)file->private_data) = 0;
+	return 0;
+}
+static ssize_t work_ipv4_read(struct file *file, char __user *buf, size_t size, loff_t *ppos) {
+	struct gfar_private *priv = PDE_DATA(file_inode(file));
+	__kernel_size_t strsize;
+
+	if (*((int*)file->private_data) != 0) {
+		printk(KERN_ERR "%s: Missing private data!\n", __func__);
+		return 0;
+	}
+
+	snprintf(buf, size-1, "%d.%d.%d.%d", (priv->f_ipv4 >> 24), (priv->f_ipv4 >> 16) & 0xFF,
+	         (priv->f_ipv4 >> 8) & 0xFF, priv->f_ipv4 & 0xFF);
+	buf[size-1] = '\0';
+
+	strsize = strlen(buf);
+	*((int*)file->private_data) = strsize;
+	return strsize;
+}
+static ssize_t work_ipv4_write(struct file *file, const char __user *buf, size_t size, loff_t *ppos) {
+	struct gfar_private *priv = PDE_DATA(file_inode(file));
+	char tmp = 0xFA;
+	int ip[4];
+
+	if (size >= 7 && sscanf(buf, "%d.%d.%d.%d%c", &ip[0], &ip[1], &ip[2], &ip[3], &tmp) >= 4) {
+		priv->f_ipv4 = 0;
+		priv->f_ipv4 |= (ip[0] & 0xFF) << 24;
+		priv->f_ipv4 |= (ip[1] & 0xFF) << 16;
+		priv->f_ipv4 |= (ip[2] & 0xFF) << 8;
+		priv->f_ipv4 |= (ip[3] & 0xFF);
+
+		return size;
+	}
+	else {
+		printk(KERN_ERR "Wrong IP-Format! Expecting XXX.XXX.XXX.XXX\n");
+		return -EINVAL;
+	}
+}
+static int work_ipv4_close(struct inode *inode, struct file *file) {
+	if (file->private_data) {
+		kfree(file->private_data);
+		file->private_data = NULL;
+	}
+	return 0;
+}
+
+static const struct file_operations work_ipv4_fops = {
+	.open = &work_ipv4_open,
+	.read = &work_ipv4_read,
+	.write = &work_ipv4_write,
+	.release = &work_ipv4_close,
+};
+
+
+
+static int work_mac_open(struct inode *node, struct file *file) {
+	file->private_data = kmalloc(sizeof(int), GFP_KERNEL);
+	*((int*)file->private_data) = 0;
+	return 0;
+}
+static ssize_t work_mac_read(struct file *file, char __user *buf, size_t size, loff_t *ppos) {
+	struct gfar_private *priv = PDE_DATA(file_inode(file));
+	__kernel_size_t strsize;
+
+	if (*((int*)file->private_data) != 0)
+		return 0;
+
+	snprintf(buf, size-1, "%02x:%02x:%02x:%02x:%02x:%02x",
+	         priv->f_mac[0], priv->f_mac[1], priv->f_mac[2],
+	         priv->f_mac[3], priv->f_mac[4], priv->f_mac[5]);
+	buf[size-1] = '\0';
+
+	strsize = strlen(buf);
+	*((int*)file->private_data) = strsize;
+	return strsize;
+}
+static ssize_t work_mac_write(struct file *file, const char __user *buf, size_t size, loff_t *ppos) {
+	struct gfar_private *priv = PDE_DATA(file_inode(file));
+	char tmp;
+	int mac[ETH_ALEN], cnt;
+
+	if (sscanf(buf,"%x:%x:%x:%x:%x:%x%c",&mac[0],&mac[1],&mac[2],&mac[3],&mac[4],&mac[5],&tmp)>=6) {
+		for (cnt=0; cnt<ETH_ALEN; cnt++) {
+			priv->f_mac[cnt] = mac[cnt] & 0xFF;
+		}
+
+		if (!is_valid_ether_addr(priv->f_mac)) {
+			printk(KERN_ERR "Invalid MAC-Address!\n");
+			memset(priv->f_mac, 0, sizeof(priv->f_mac));
+			return -EINVAL;
+		}
+		return size;
+	}
+	else {
+		printk(KERN_ERR "Wrong MAC-Format! Expecting XX:XX:XX:XX:XX:XX\n");
+		return -EINVAL;
+	}
+}
+static int work_mac_close(struct inode *inode, struct file *file) {
+	if (file->private_data) {
+		kfree(file->private_data);
+		file->private_data = NULL;
+	}
+	return 0;
+}
+
+static const struct file_operations work_mac_fops = {
+	.open = &work_mac_open,
+	.read = &work_mac_read,
+	.write = &work_mac_write,
+	.release = &work_mac_close,
+};
+
+int work_create_fs(struct net_device *dev) {
+#ifdef CONFIG_PROC_FS
+	struct gfar_private *priv = netdev_priv(dev);
+	char buf[128];
+
+	sprintf(buf, "work_%s_buf", dev->name);
+	if (!proc_create_data(buf, S_IRUGO, init_net.proc_net, &work_buffer_fops, priv)) {
+		printk(KERN_ERR "WORK: cannot create /proc/net/%s entry.\n", buf);
+		return -ENOENT;
+	}
+	else {
+		printk(KERN_NOTICE "WORK: /proc/net/%s entry created!\n",buf);
+	}
+	sprintf(buf, "work_%s_ipv4", dev->name);
+	if (!proc_create_data(buf, S_IRUGO, init_net.proc_net, &work_ipv4_fops, priv)) {
+		printk(KERN_ERR "WORK: cannot create /proc/net/%s entry.\n", buf);
+		return -ENOENT;
+	}
+	else {
+		printk(KERN_NOTICE "WORK: /proc/net/%s entry created!\n",buf);
+	}
+	sprintf(buf, "work_%s_mac", dev->name);
+	if (!proc_create_data(buf, S_IRUGO, init_net.proc_net, &work_mac_fops, priv)) {
+		printk(KERN_ERR "WORK: cannot create /proc/net/%s entry.\n", buf);
+		return -ENOENT;
+	}
+	else {
+		printk(KERN_NOTICE "WORK: /proc/net/%s entry created!\n",buf);
+	}
+
+	return 0;
+#endif  /* CONFIG_PROC_FS */
+}
+
+/** Returns true when address is multicast address (not broadcast) */
+static inline bool ipv4_is_multicast_only(__be32 addr) {
+	return (addr & htonl(0xf0000000)) == htonl(0xe0000000);
+}
+
+/** Returns true when address is multicast address (not broadcast) */
+static inline bool ether_is_multicast_only(const char* mac) {
+	return mac[0] == 0x01;
+}
+
+static inline bool is_skippy_pkt(const struct gfar_private *priv, const char* eth_pkt) {
+	struct ethhdr *eth = (struct ethhdr *) eth_pkt;
+	struct iphdr *ipv4 = (struct iphdr *) (eth_pkt + ETH_HLEN);
+	bool matches_ip = ipv4->daddr != priv->f_ipv4 && ether_addr_equal(eth->h_dest, priv->f_mac);
+	bool matches_multicast = ipv4_is_multicast_only(ipv4->daddr) && ether_is_multicast_only(eth->h_dest);
+	return eth->h_proto == ETH_P_IP && (matches_ip || matches_multicast);
+}
+
+int work_allocate_buffer(struct gfar_priv_rx_q * rx_queue) {
+	rx_queue->rx_pktbuff = kmalloc_array(rx_queue->rx_ring_size, sizeof(rx_queue->rx_pktbuff[0]), GFP_KERNEL | __GFP_ZERO);
+	if (rx_queue->rx_pktbuff == NULL) {
+		printk(KERN_ERR "%s:%d Failed to allocate %d bytes!\n", __FILE__, __LINE__,
+		       rx_queue->rx_ring_size * sizeof(rx_queue->rx_pktbuff[0]));
+		return -ENOMEM;
+	}
+
+	memset(rx_queue->rx_pktbuff, 0, rx_queue->rx_ring_size * sizeof(rx_queue->rx_pktbuff[0]));
+	return 0;
+}
+
+void work_free_buffer(struct gfar_priv_rx_q *rx_queue) {
+	kfree(rx_queue->rx_pktbuff);
+	rx_queue->rx_pktbuff = NULL;
+}
+
+void work_verify_rx_queue(struct gfar_private *priv) {
+	int i;
+	if (priv->num_rx_queues != 1) {
+		printk(KERN_WARNING "WORK's gianfar driver supports only one rx-queue: %d\n",
+		       priv->num_rx_queues);
+	}
+	for (i = 0; i < priv->num_rx_queues; i++) {
+		struct gfar_priv_rx_q *rx_queue = priv->rx_queue[i];
+		if (rx_queue->rx_ring_size != RX_RING_SIZE) {
+			printk(KERN_WARNING "Changing rx-ring-size from %d to %d.\n",
+			       rx_queue->rx_ring_size, RX_RING_SIZE);
+			rx_queue->rx_ring_size = RX_RING_SIZE;
+		}
+	}
+}
+
+void work_free_rx_queue(struct gfar_priv_rx_q *rx_queue)
+{
+	int i;
+	struct rxbd8 *rxbdp = rx_queue->rx_bd_base;
+
+	if (rx_queue->skb)
+		dev_kfree_skb(rx_queue->skb);
+
+	for (i = 0; i < rx_queue->rx_ring_size; i++) {
+		struct work_priv_rx_pkt *pktbuff = &rx_queue->rx_pktbuff[i];
+
+		rxbdp->lstatus = 0;
+		rxbdp->bufPtr = 0;
+		rxbdp++;
+
+		dma_unmap_single(rx_queue->dev, pktbuff->dma, sizeof(pktbuff->frame), DMA_FROM_DEVICE);
+	}
+
+	work_free_buffer(rx_queue);
+}
+
+// replacement of gfar_new_page
+static bool work_new_page(struct gfar_priv_rx_q *rx_queue, struct work_priv_rx_pkt *pktbuff)
+{
+	dma_addr_t addr;
+
+	addr = dma_map_single(rx_queue->dev, pktbuff->frame, sizeof(pktbuff->frame), DMA_FROM_DEVICE);
+	if (unlikely(dma_mapping_error(rx_queue->dev, addr))) {
+		return false;
+	}
+
+	pktbuff->dma = addr;
+	pktbuff->status = NET_BYPASS_STATUS_PACKET_IN_DMA;
+	pktbuff->size = 0;
+
+	return true;
+}
+
+// replacement of gfar_alloc_rx_buffs
+void work_alloc_rx_buffs(struct gfar_priv_rx_q *rx_queue, int alloc_cnt)
+{
+	struct rxbd8 *bdp;
+	struct work_priv_rx_pkt *pktbuff;
+	int i;
+
+	i = rx_queue->next_to_use;
+	bdp = &rx_queue->rx_bd_base[i];
+
+	while (alloc_cnt--) {
+		pktbuff = &rx_queue->rx_pktbuff[i];
+
+		// Do not reuse buffer, when it's still in use by the application
+		if (pktbuff->status != NET_BYPASS_STATUS_FREE_PACKET) break;
+
+		if (unlikely(!pktbuff->dma)) {
+			if (unlikely(!work_new_page(rx_queue, pktbuff))) {
+				gfar_rx_alloc_err(rx_queue);
+				break;
+			}
+		}
+		pktbuff->status = NET_BYPASS_STATUS_PACKET_IN_DMA;
+
+		/* Setup the new RxBD */
+		gfar_init_rxbdp(rx_queue, bdp, pktbuff->dma);
+
+		/* Update to the next pointer */
+		bdp++;
+
+		if (unlikely(++i == rx_queue->rx_ring_size)) {
+			i = 0;
+			bdp = rx_queue->rx_bd_base;
+		}
+	}
+
+	rx_queue->next_to_use = i;
+	rx_queue->next_to_alloc = i;
+}
+
+// replaces gfar_get_next_rxbuff
+struct sk_buff *work_get_next_rxbuff(struct gfar_priv_rx_q *rx_queue,
+                                     u32 lstatus, struct sk_buff *skb)
+{
+	struct gfar_private *priv = netdev_priv(rx_queue->ndev);
+	struct work_priv_rx_pkt *pktbuff = &rx_queue->rx_pktbuff[rx_queue->next_to_clean];
+	unsigned int size = lstatus & BD_LENGTH_MASK;
+
+	if (pktbuff->status != NET_BYPASS_STATUS_PACKET_IN_DMA) {
+		printk(KERN_ERR "ERROR: %s: status[%d]=%d instead of %d!\n", __func__,
+		       rx_queue->next_to_clean, pktbuff->status, NET_BYPASS_STATUS_PACKET_IN_DMA);
+	}
+
+	/* Remove the FCS from the packet length */
+	if (likely(lstatus & BD_LFLAG(RXBD_LAST)))
+		size -= ETH_FCS_LEN;
+
+	dma_sync_single_range_for_cpu(rx_queue->dev, pktbuff->dma, 0, sizeof(pktbuff->frame), DMA_FROM_DEVICE);
+
+
+	pktbuff->offset = 0;
+	if (priv->uses_rxfcb) {
+		pktbuff->offset += GMAC_FCB_LEN;
+	}
+	if (priv->padding) {
+		pktbuff->offset += priv->padding;
+	}
+
+	if (is_skippy_pkt(priv, pktbuff->frame + pktbuff->offset)) {
+		pktbuff->size   = size - pktbuff->offset;
+		pktbuff->offset = 16;
+		pktbuff->status = NET_BYPASS_STATUS_USER_PACKET;
+
+		if (skb) {
+			dev_kfree_skb(skb);
+			skb = NULL;
+		}
+	}
+	else {
+		skb = netdev_alloc_skb(rx_queue->ndev, size);
+		if (!skb) return NULL;
+		memcpy(skb_put(skb, size), pktbuff->frame, size);
+
+		pktbuff->status = NET_BYPASS_STATUS_HANDLED_BY_KERNEL;
+	}
+
+	return skb;
+}
+
+
+
diff --git a/drivers/net/ethernet/freescale/gianfar_work.h b/drivers/net/ethernet/freescale/gianfar_work.h
new file mode 100644
index 000000000000..789e6a44ad62
--- /dev/null
+++ b/drivers/net/ethernet/freescale/gianfar_work.h
@@ -0,0 +1,53 @@
+/*
+ * drivers/net/ethernet/freescale/gianfar_work.h
+ *
+ * WORK's Supplement for Gianfar Ethernet Driver
+ *
+ * Author: Karl Krach <karl.krach@work-microwave.com>
+ *
+ * This program is free software; you can redistribute  it and/or modify it
+ * under  the terms of  the GNU General  Public License as published by the
+ * Free Software Foundation;  either version 2 of the  License, or (at your
+ * option) any later version.
+ */
+
+#ifndef __GIANFAR_WORK_H
+#define __GIANFAR_WORK_H
+
+#include <linux/kernel.h>
+
+// Forward declarations
+struct net_device;
+struct sk_buff;
+struct gfar_priv_rx_q;
+struct gfar_private;
+
+#define WORK_JUMBO_BUFFER_SIZE                 9728
+
+// TODO: change to bitmask (which also fits the old defines)
+#define NET_BYPASS_STATUS_USER_PACKET          1
+#define NET_BYPASS_STATUS_FREE_PACKET          0
+#define NET_BYPASS_STATUS_PACKET_IN_DMA       -1
+#define NET_BYPASS_STATUS_INVALID_PACKET      -101
+#define NET_BYPASS_STATUS_HANDLED_BY_KERNEL   -102
+
+struct work_priv_rx_pkt {
+	int status;
+	int size;
+	int offset;
+	dma_addr_t dma;
+	char reserved[128-3*sizeof(int)-sizeof(dma_addr_t)];
+	char frame[WORK_JUMBO_BUFFER_SIZE];
+} __attribute__((packed));
+
+int work_create_fs(struct net_device *dev);
+int work_consume_to_skippy(struct net_device *dev, const struct sk_buff *skb);
+int work_allocate_buffer(struct gfar_priv_rx_q *rx_queue);
+void work_free_buffer(struct gfar_priv_rx_q *rx_queue);
+void work_verify_rx_queue(struct gfar_private *priv);
+void work_free_rx_queue(struct gfar_priv_rx_q *rx_queue);
+void work_alloc_rx_buffs(struct gfar_priv_rx_q *rx_queue, int alloc_cnt);
+struct sk_buff *work_get_next_rxbuff(struct gfar_priv_rx_q *rx_queue, u32 lstatus, struct sk_buff *skb);
+
+
+#endif // __GIANFAR_WORK_H
